// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SinemaApp.DataAccessLayer.Context;

#nullable disable

namespace SinemaApp.DataAccessLayer.Migrations
{
    [DbContext(typeof(SinemaAppContext))]
    [Migration("20250414121725_mig_1")]
    partial class mig_1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SinemaApp.Entities.Concrete.Bilet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FilmId")
                        .HasColumnType("int");

                    b.Property<int?>("FilmId1")
                        .HasColumnType("int");

                    b.Property<decimal>("Fiyat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("KoltukId")
                        .HasColumnType("int");

                    b.Property<int>("KullaniciId")
                        .HasColumnType("int");

                    b.Property<int?>("KullaniciId1")
                        .HasColumnType("int");

                    b.Property<string>("Qr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeansId")
                        .HasColumnType("int");

                    b.Property<int?>("SeansId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FilmId");

                    b.HasIndex("FilmId1");

                    b.HasIndex("KoltukId")
                        .IsUnique();

                    b.HasIndex("KullaniciId");

                    b.HasIndex("KullaniciId1");

                    b.HasIndex("SeansId");

                    b.HasIndex("SeansId1");

                    b.ToTable("Biletler");
                });

            modelBuilder.Entity("SinemaApp.Entities.Concrete.Film", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Ad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fotograf")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fragman")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tur")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Zaman")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Filmler");
                });

            modelBuilder.Entity("SinemaApp.Entities.Concrete.Koltuk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BiletId")
                        .HasColumnType("int");

                    b.Property<string>("Durum")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SalonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SalonId");

                    b.ToTable("Koltuklar");
                });

            modelBuilder.Entity("SinemaApp.Entities.Concrete.Kullanici", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Ad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.Property<string>("Sifre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Soyad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RolId");

                    b.ToTable("Kullanicilar");
                });

            modelBuilder.Entity("SinemaApp.Entities.Concrete.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Ad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roller");
                });

            modelBuilder.Entity("SinemaApp.Entities.Concrete.Salon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Ad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kapasite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Salonlar");
                });

            modelBuilder.Entity("SinemaApp.Entities.Concrete.Seans", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Baslangic")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Bitis")
                        .HasColumnType("datetime2");

                    b.Property<int>("FilmId")
                        .HasColumnType("int");

                    b.Property<int>("SalonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FilmId");

                    b.HasIndex("SalonId");

                    b.ToTable("Seanslar");
                });

            modelBuilder.Entity("SinemaApp.Entities.Concrete.Bilet", b =>
                {
                    b.HasOne("SinemaApp.Entities.Concrete.Film", "Film")
                        .WithMany()
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SinemaApp.Entities.Concrete.Film", null)
                        .WithMany("Biletler")
                        .HasForeignKey("FilmId1");

                    b.HasOne("SinemaApp.Entities.Concrete.Koltuk", "Koltuk")
                        .WithOne("Bilet")
                        .HasForeignKey("SinemaApp.Entities.Concrete.Bilet", "KoltukId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SinemaApp.Entities.Concrete.Kullanici", "Kullanici")
                        .WithMany()
                        .HasForeignKey("KullaniciId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SinemaApp.Entities.Concrete.Kullanici", null)
                        .WithMany("Biletler")
                        .HasForeignKey("KullaniciId1");

                    b.HasOne("SinemaApp.Entities.Concrete.Seans", "Seans")
                        .WithMany()
                        .HasForeignKey("SeansId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SinemaApp.Entities.Concrete.Seans", null)
                        .WithMany("Biletler")
                        .HasForeignKey("SeansId1");

                    b.Navigation("Film");

                    b.Navigation("Koltuk");

                    b.Navigation("Kullanici");

                    b.Navigation("Seans");
                });

            modelBuilder.Entity("SinemaApp.Entities.Concrete.Koltuk", b =>
                {
                    b.HasOne("SinemaApp.Entities.Concrete.Salon", "Salon")
                        .WithMany("Koltuklar")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("SinemaApp.Entities.Concrete.Kullanici", b =>
                {
                    b.HasOne("SinemaApp.Entities.Concrete.Rol", "Rol")
                        .WithMany("Kullanicilar")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("SinemaApp.Entities.Concrete.Seans", b =>
                {
                    b.HasOne("SinemaApp.Entities.Concrete.Film", "Film")
                        .WithMany("Seanslar")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SinemaApp.Entities.Concrete.Salon", "Salon")
                        .WithMany()
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("SinemaApp.Entities.Concrete.Film", b =>
                {
                    b.Navigation("Biletler");

                    b.Navigation("Seanslar");
                });

            modelBuilder.Entity("SinemaApp.Entities.Concrete.Koltuk", b =>
                {
                    b.Navigation("Bilet")
                        .IsRequired();
                });

            modelBuilder.Entity("SinemaApp.Entities.Concrete.Kullanici", b =>
                {
                    b.Navigation("Biletler");
                });

            modelBuilder.Entity("SinemaApp.Entities.Concrete.Rol", b =>
                {
                    b.Navigation("Kullanicilar");
                });

            modelBuilder.Entity("SinemaApp.Entities.Concrete.Salon", b =>
                {
                    b.Navigation("Koltuklar");
                });

            modelBuilder.Entity("SinemaApp.Entities.Concrete.Seans", b =>
                {
                    b.Navigation("Biletler");
                });
#pragma warning restore 612, 618
        }
    }
}
